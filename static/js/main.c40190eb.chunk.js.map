{"version":3,"sources":["components/ContactForm/ContactsForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","redux/phonebook-selectors.jsx","redux/phonebook-actions.jsx","components/Container/Container.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","App.js","redux/phonebook-reducer.jsx","redux/store.jsx","index.js"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","name","includes","addContact","createAction","number","payload","id","shortid","generate","deleteContact","changeFilter","Container","children","className","s","container","ContactList","useSelector","dispatch","useDispatch","contactList","map","contact","nameText","deleteBtn","type","onClick","phonebookActions","onDeleteContact","ContactForm","useState","setName","setNumber","form","onSubmit","e","preventDefault","namesInPhonebook","reduce","acc","numbersInPhonebook","alert","contactMatching","formLabel","formInput","placeholder","value","onChange","currentTarget","country","addBtn","Filter","filterLabel","filterInput","target","App","createReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","phonebookPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phonebookReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c40190eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__L9jGs\",\"formLabel\":\"ContactsForm_formLabel__jRcmo\",\"formInput\":\"ContactsForm_formInput__3Qw7m\",\"addBtn\":\"ContactsForm_addBtn__3cp6j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__1pNjm\",\"contact\":\"ContactList_contact__2aMbO\",\"nameText\":\"ContactList_nameText__33dNv\",\"deleteBtn\":\"ContactList_deleteBtn__20Iki\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__2wLmA\",\"filterInput\":\"Filter_filterInput__3czeV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__15Ouo\"};","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n    const contacts = getContacts(state);\r\n    const filter = getFilter(state)\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({name}) => name.toLowerCase().includes(normalizedFilter))\r\n}","import { createAction } from '@reduxjs/toolkit'\r\nimport shortid from 'shortid'\r\n\r\nexport const addContact = createAction('phonebook/add', (name, number) => ({\r\n    payload: {\r\n        id: shortid.generate(),\r\n        name,\r\n        number,\r\n    }\r\n}));\r\n\r\nexport const deleteContact = createAction('phonebook/delete');\r\nexport const changeFilter = createAction('phonebook/changeFilter');","import React from 'react';\nimport s from './Container.module.css';\nimport PropTypes from 'prop-types';\n\nconst Container = ({ children }) => {\n  return <div className={s.container}>{children}</div>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import { useSelector, useDispatch } from 'react-redux'\nimport * as phonebookActions from '../../redux/phonebook-actions'\nimport {getVisibleContacts} from '../../redux/phonebook-selectors'\nimport s from './ContactList.module.css';\n\n\nexport default function ContactList() {\n  \n  const contacts = useSelector(getVisibleContacts)\n  const dispatch = useDispatch()\n  const onDeleteContact = id => dispatch(phonebookActions.deleteContact(id))\n  return (\n    <ul className={s.contactList}>\n{contacts.map(({ id, name, number }) => (\n      <li className={s.contact} key={id}>\n        <p className={s.nameText}>\n          {name} : {number}\n        </p>\n\n        <button\n          className={s.deleteBtn}\n          type=\"button\"\n          onClick={() => onDeleteContact(id)}\n        >\n          Удалить\n        </button>\n      </li>\n    ))}\n  </ul>\n\n  )\n}\n  \n    \n\n\n\n\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css';\nimport { getContacts } from '../../redux/phonebook-selectors'\nimport * as phonebookActions from '../../redux/phonebook-actions'\nimport s from './ContactsForm.module.css';\n\n\nexport default function ContactForm() {\n  const contacts = useSelector(getContacts)\n  const dispatch = useDispatch()\n  const onSubmit = (name,number) => dispatch(phonebookActions.addContact(name,number))\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contactMatching = () => {\n    const namesInPhonebook = contacts.reduce(\n      (acc, contact) => [...acc, contact.name],\n      [],\n    );\n\n    const numbersInPhonebook = contacts.reduce(\n      (acc, contact) => [...acc, contact.number],\n      [],\n    );\n\n    if (namesInPhonebook.includes(name) ||\n      numbersInPhonebook.includes(number)\n    ) {\n      alert(`${name}${number} is already in contacts`)\n      return true\n    }\n\n    if (name === '' || number === '') {\n      alert('Please enter something')\n      return true\n    }\n  } \n\n  const onSubmitForm = e => {\n    e.preventDefault();\n     setName('');\n    setNumber('');\n\n    if (contactMatching()) {\n  return\n}\n    onSubmit(name, number);\n   \n  };\n  \n  return (\n    <form className={s.form} onSubmit={onSubmitForm}>\n      <label className={s.formLabel} >\n        Name\n        <input\n          className={s.formInput}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"John Doe\"\n          value={name}\n          onChange={e=>setName(e.currentTarget.value)}         \n        ></input>\n      </label>\n      <label className={s.formLabel} >\n        Number\n        <PhoneInput          \n          country = {'us'}  \n          name=\"number\"          \n          value={number}\n          onChange={setNumber}         \n        />\n      </label>\n      <button className={s.addBtn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = shortid.generate();\n//   numberInputId = shortid.generate();\n\n//   handleNameChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   onSubmitForm = e => {\n//     e.preventDefault();\n//     this.props.onSubmit(this.state);\n\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n//   render() {\n//     return (\n//       <form className={s.form} onSubmit={this.onSubmitForm}>\n//         <label className={s.formLabel} htmlFor={this.nameInputId}>\n//           Name\n//           <input\n//             className={s.formInput}\n//             type=\"text\"\n//             name=\"name\"\n//             placeholder = \"John Doe\"\n//             value={this.state.name}\n//             onChange={this.handleNameChange}\n//             id={this.nameInputId}\n//           ></input>\n//         </label>\n//         <label className={s.formLabel} htmlFor={this.numberInputId}>\n//           Number\n//           <input\n//             className={s.formInput}\n//             type=\"phone\"\n//             name=\"number\"\n//             placeholder=\"111-11-11\"\n//             value={this.state.number}\n//             onChange={this.handleNameChange}\n//             id={this.numberInputId}\n//           ></input>\n//         </label>\n//         <button className={s.addBtn} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// export default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux'\nimport { getFilter } from '../../redux/phonebook-selectors'\nimport * as phonebookActions from '../../redux/phonebook-actions'\nimport s from './Filter.module.css';\n\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = e => dispatch(phonebookActions.changeFilter(e.target.value));\n\n\n  return (\n    <label className={s.filterLabel}>\n    Search contact\n    <input\n      className={s.filterInput}\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n  )\n\n} \n\n\n\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from './redux/phonebook-selectors';\nimport * as phonebookActions from './redux/phonebook-actions';\nimport Container from './components/Container/Container';\nimport ContactList from './components/ContactList';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\n\nexport default function App() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevState, prevProps) {\n//     const nextContacts = this.state.contacts;\n//     const prevContacts = prevState.contacts;\n\n//     if (nextContacts !== prevContacts) {\n//       localStorage.setItem('contacts', JSON.stringify(nextContacts));\n//     }\n//   }\n\n//   addContact = ({ name, number }) => {\n//     const contact = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     const { contacts } = this.state;\n\n//     if (\n//       contacts.find(\n//         contact => contact.name.toLowerCase() === name.toLowerCase(),\n//       )\n//     ) {\n//       alert(`${name} is already in contacts.`);\n//     } else if (contacts.find(contact => contact.number === number)) {\n//       alert(`${number} is already in contacts.`);\n//     } else if (name.trim() === '' || number.trim() === '') {\n//       alert(\"Enter the contact's name and number phone!\");\n//     } else if (!/\\d{3}[-]\\d{2}[-]\\d{2}/g.test(number)) {\n//       alert('Enter the correct number phone!');\n//     } else {\n//       this.setState(({ contacts }) => ({\n//         contacts: [contact, ...contacts],\n//       }));\n//     }\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   formSubmitHandler = data => {\n//     console.log(data);\n//   };\n\n//   changeFilter = e => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n\n//   getFilteredContacts = () => {\n//     const { contacts, filter } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   render() {\n//     const { contacts, filter } = this.state;\n//     const filteredContacts = this.getFilteredContacts();\n\n//     return (\n//       <Container>\n//         <h1>Phonebook</h1>\n//         <ContactForm onSubmit={this.addContact} contacts={contacts} />\n//         <h2>Contacts</h2>\n//         <Filter value={filter} onChange={this.changeFilter} />\n//         <ContactList\n//           contacts={filteredContacts}\n//           onDeleteContact={this.deleteContact}\n//         />\n//       </Container>\n//     );\n//   }\n// }\n// export default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport { addContact, deleteContact, changeFilter } from './phonebook-actions'\r\n\r\nconst initialContacts = [\r\n  { \"id\": \"id-1\", \"name\": \"Rosie Simpson\", \"number\": \"459-12-56\" },\r\n  { \"id\": \"id-2\", \"name\": \"Hermione Kline\", \"number\": \"443-89-12\" },\r\n  { \"id\": \"id-3\", \"name\": \"Eden Clements\", \"number\": \"645-17-79\" },\r\n  { \"id\": \"id-4\", \"name\": \"Annie Copeland\", \"number\": \"227-91-26\" }\r\n]\r\n\r\nconst items = createReducer(initialContacts, {\r\n    [addContact]: (state, { payload }) => [payload, ...state],\r\n    [deleteContact]: (state, { payload }) =>\r\n        state.filter(({ id }) => id !== payload)\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [changeFilter]:(state, {payload}) => payload\r\n})\r\n\r\nexport default combineReducers({\r\n    items,filter\r\n})","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport logger from 'redux-logger'\r\nimport {persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n    REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport phonebookReducer from './phonebook-reducer'\r\n  \r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        }\r\n    }),\r\n    logger,\r\n]\r\n\r\nconst phonebookPersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter']\r\n}\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        contacts: persistReducer(phonebookPersistConfig, phonebookReducer)\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development'\r\n});\r\n\r\nexport const persistor = persistStore(store)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}